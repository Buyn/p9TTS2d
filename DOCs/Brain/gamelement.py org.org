#+BRAIN_CHILDREN: Card.py%20class%20org test_gamelement.py%20org

#+BRAIN_FRIENDS: index

#+BRAIN_PARENTS: board.py%20org%20file


* Command 
** execute-src-block : 
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file : 
[[elisp:(org-babel-tangle)]]
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/gamelement.py")
(org-babel-tangle)
"D:\Development\version-control\GitHub\My-python\pytts2d\DOCs\Brain\gamelement.py org.org" 

f D:\Development\version-control\GitHub\My-python\pytts2d\SRC\ D:\Development\version-control\GitHub\My-python\pytts2d\Exmpls\cardgame\

D:\Development\version-control\GitHub\My-python\pytts2d\Exmpls\cardgame\cardgame.py 
python -m D:\Development\version-control\GitHub\My-python\pytts2d\Exmpls\cardgame\cardgame.py 

** auto-tangle-block : 
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-buffer)
(org-babel-tangle)
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/gamelement.py")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src

* Start Source
:PROPERTIES:
:header-args: :tangle  "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/gamelement.py"
:END:
** start comment
#+begin_src python 
"""
p2tts2d game.
Game element class
2023-08-24
"""
#+end_src
** import
#+begin_src python
from gconstants import *
import arcade


#+end_src
** class Gamelement() root Spite class.
*** class Gamelement : 
#+begin_src python
class Gamelement(arcade.Sprite):
    """ Game element sprite """

#+end_src
*** def __init__
        # should be the default value for objects
        # image_file_name = f":resources:images/cards/card{self.suit}{self.value}.png"
#+begin_src python
    def __init__(self, keeper,
                 image_file_name_face_up = None,
                 image_file_name_face_down = None,
                 scale=1, hit_box_algorithm="None"):
        """ Game element constructor """
        if not image_file_name_face_up:
            image_file_name_face_up = GAMELEMENT_FACE_UP_IMAGE
        if not image_file_name_face_down:
            image_file_name_face_down = GAMELEMENT_FACE_DOWN_IMAGE
        self.image_file_name_face_down = image_file_name_face_down
        self.image_file_name_face_up  = image_file_name_face_up
        self.is_face_up = True
        # Call the parent
        super().__init__(self.image_file_name_face_up, scale, hit_box_algorithm=hit_box_algorithm)
        self.add_to_keeper(keeper)
        self.pulled = False
        self.events = {"event_on_drop":self.on_drop,
                      "event_on_pull":self.on_pull,
                      "event_on_move":self.on_move}
        
#+end_src
                 image_file_name_face_up = GAMELEMENT_FACE_UP_IMAGE,
                 image_file_name_face_down = GAMELEMENT_FACE_DOWN_IMAGE,
        # self.events = {"On Drop":self.on_drop,
        #               "On Pull":self.on_pull,
        #               "On Move":self.on_move}

*** property is_face_down : 
#+begin_src python
    @property
    def is_face_down(self):
        """ Is this element ard face down? """
        return not self.is_face_up

#+end_src
*** def face_down : 
#+begin_src python
    def face_down(self):
        """ Turn element face-down """
        self.texture = arcade.load_texture(self.image_file_name_face_down)
        self.is_face_up = False

#+end_src
*** def face_up : 
#+begin_src python
    def face_up(self):
        """ Turn element face-up """
        self.texture = arcade.load_texture(self.image_file_name_face_up)
        self.is_face_up = True

#+end_src
*** def face_flip(self): : 
#+begin_src python
    def face_flip(self, enput, args):
        """ Turn element to other side """
        if self.is_face_up:
            self.face_down()
        else:
            self.face_up()

#+end_src
*** def add_to_keeper : 
        # self.keeper.elements_list.append(self)
        # self.keeper.add_element(self)
        # self.keeper.add_to_draw(self)
#+begin_src python
    def add_to_keeper(self, new_keeper):
        self.keeper = new_keeper
        new_keeper.add_element(self)

#+end_src
*** def on_move(self, event): 
#+begin_src python
    def on_move(self, enput, args):
        if self.pulled:
            # Perform action for the move event
            self.center_x += args[DX]
            self.center_y += args[DY]

#+end_src

*** def on_pull(self, event): : 
#+begin_src python
    def on_pull(self, enput, args):
        if not self.pulled:
            # Perform action for the pull event
            self.pulled = True
            enput.add_to_held(self)
            self.keeper.pull_to_top(self)

#+end_src
            # print("Card has been pulled!")

*** def on_drop(self, enput, args):
#+begin_src python
    def on_drop(self, enput, args):
        if self.pulled:
            # Perform action for the pull event
            self.pulled = False
            # Attributes for suit and value
            enput.remove_from_held(self)

#+end_src
            # print("Card has been dropt!")

*** def add_event(self, event, handler):
#+begin_src python
    def add_event(self, event, handler):
        self.events[event] = handler

#+end_src

*** def remove_event(self, event):
#+begin_src python
    def remove_event(self, event):
        if event in self.events:
            self.events[event].pop(event)

#+end_src

*** def pull_to_top
#+begin_src python
    def pull_to_top(self, element: arcade.Sprite):
        """ Pull element sprite to top of rendering order (last to render, looks on-top) """
        # Remove, and append to the end
        self.keeper.pull_to_top(element)

#+end_src

*** def move_to_keeper : 
#+begin_src python
    def move_to_keeper(self, new_keeper):
        """ Move elevent from curent keeper
to new one  """
        self.keeper.remove_element(self)
        self.keeper = new_keeper
        new_keeper.add_element(self)

#+end_src

** if __name__ == "__main__" : 
#+begin_src python
if __name__ == "__main__":
    print("testin Gamelement")
    import game
    game = game.Game()
    import board
    board = board.Board(game)
    image_file_name = f":resources:images/cards/cardHeartsA.png"
    # CARD_VALUES = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
    # CARD_SUITS = ["Clubs", "Hearts", "Spades", "Diamonds"]
    test = Gamelement(board, image_file_name)
    assert(test != None)
    # test.on_left_double_clik(1,2,3,4)

#+end_src
* описание
