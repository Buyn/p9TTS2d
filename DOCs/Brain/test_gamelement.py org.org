#+BRAIN_PARENTS: gamelement.py%20org



* Command 
** execute-src-block : 
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file : 
[[elisp:(org-babel-tangle)]]
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/test_gamelement.py")
(org-babel-tangle)
"D:\Development\version-control\GitHub\My-python\pytts2d\DOCs\Brain\test_gamelement.py org.org" 


** auto-tangle-block : 
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-buffer)
(org-babel-tangle)
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/test_gamelement.py")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src

* Start Source
:PROPERTIES:
:header-args: :tangle  "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/test_gamelement.py"
:END:
** start comment
#+begin_src python 
"""
p2tts2d game.
testing class 
2023-08-26
"""

#+end_src
** import
#+begin_src python
import unittest
from gamelement import *


#+end_src
** class test_gamelement()
*** class unitTest : 
#+begin_src python
class Test(unittest.TestCase):

#+end_src
*** def setUpClass(self)
#+begin_src python
    @classmethod 
    def setUpClass(self):
        class Board():
            def __init__(self):
                pass                                              

            def add_element(self, element):
                pass                                              

        keeper = Board()
        self.test = Gamelement(keeper)

#+end_src
*** def tearDownClass(cls):
#+begin_src python :tangle no 
    @classmethod 
    def tearDownClass(cls):
        self.test = None

#+end_src
*** def test_newText : 
#+begin_src python
    def test_init(self):
        self.assertIsNotNone( self.test.image_file_name_face_down )
        self.assertEqual( self.test.events["event_on_pull"], self.test.on_pull)
        self.assertEqual( self.test.events["event_on_drop"], self.test.on_drop)

#+end_src
*** def test_flip : 
#+begin_src python
    def test_flip(self):
      self.assertTrue(self.test.is_face_up)              
      self.assertFalse(self.test.is_face_down)              
      self.test.face_flip("enput", "args")
      self.assertFalse(self.test.is_face_up)              
      self.assertTrue(self.test.is_face_down)              
      self.assertEqual( self.test.center_x, 0)

#+end_src
     def test_card(self):
*** def test_move : 
#+begin_src python
    def test_move(self):
        self.test.pulled = True
        args = [0,1,2,3]
        self.test.on_move("input",args)
        self.assertEqual( self.test.center_x, 2)
        self.test.on_move("input",args)
        self.assertEqual( self.test.center_x, 4)

#+end_src
** if __name__ == "__main__" : 
 # ----------------------------------------------
 # (compile " D:/Development/version-control/GitHub/Vadim/Tochil/main_test.py -k init")
 # (compile " python -m unittest D:/Development/version-control/GitHub/Vadim/Tochil/main_test.py ")
#+begin_src python
if __name__ == "__main__":
    unittest.main()

#+end_src
     #import sys;sys.argv = ['', 'Test.testName']
     runner = unittest.TextTestRunner()
     runner.run(suite_Init())
 # * ----------------------------------------------:
* описание
* 2023-08-31
