#+BRAIN_CHILDREN: gamelement.py%20org

#+BRAIN_FRIENDS: index

#+BRAIN_PARENTS: main.py%20org%20file


* Command 
** execute-src-block : 
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file : 
[[elisp:(org-babel-tangle)]]
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/board.py")
(org-babel-tangle)
"D:\Development\version-control\GitHub\My-python\pytts2d\DOCs\Brain\List of exempls.org" 

f D:\Development\version-control\GitHub\My-python\pytts2d\Exmpls\cardgame\
D:\Development\version-control\GitHub\My-python\pytts2d\Exmpls\cardgame\cardgame.py 
python -m D:\Development\version-control\GitHub\My-python\pytts2d\Exmpls\cardgame\cardgame.py 

** auto-tangle-block : 
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-buffer)
(org-babel-tangle)
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/board.py")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src

* Start Source
:PROPERTIES:
:header-args: :tangle  "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/board.py"
:END:
** start comment
#+begin_src python 
"""
p2tts2d game.
"""
#+end_src
** import
#+begin_src python
from gconstants import *
from card import Card
import arcade


#+end_src
** class Board() Window application class.
*** class Board : 
#+begin_src python
class Board(arcade.Window):
    """ Window application class. """
#+end_src
*** def __init__
#+begin_src python
    def __init__(self, _game):
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
        self.game = _game
        self.mouse = _game.mouse
        arcade.set_background_color(BOARD_BACKGROUND_COLOR)
        # Game elements list with all the elements, no matter what pile they are in.
        self.elements_list = arcade.SpriteList()
        
#+end_src

*** def setup : 
        # self.sprites_list = None
        # self.sprites_list = arcade.SpriteList()
#+begin_src python
    def setup(self):
        """ Set up the game here. Call this function to restart the game. """
        # Sprite list with all the elements, no matter what pile they are in.
        self.elements_list = None
        self.elements_list = arcade.SpriteList()
        # reset heldet elements
        self.mouse.setup()
        # Create every card
        count=0
        for card_suit in CARD_SUITS:
            for card_value in CARD_VALUES:
                count +=1
                card = Card(self,
                            card_suit,
                            card_value,
                            x=START_X+count,
                            y=BOTTOM_Y+count)

#+end_src
                # card.position = START_X, BOTTOM_Y
                # self.elements_list.append(card)
                # card.add_to_draw(START_X, BOTTOM_Y)

*** def on_draw : 
#+begin_src python
    def on_draw(self):
        """ Render the screen. """
        # Clear the screen
        self.clear()
        # Draw the elements
        self.elements_list.draw()

#+end_src
*** def on_mouse_press : 
#+begin_src python
    def on_mouse_press(self, x, y, button, key_modifiers):
        """ Called when the user presses a mouse button. """
        if self.mouse.set_on_mouse_press(x, y, button, key_modifiers, self):
            return

#+end_src
*** def on_mouse_release : 
#+begin_src python
    def on_mouse_release(self, x: float, y: float, button: int,
                         key_modifiers: int):
        """ Called when the user presses a mouse button. """
        if self.mouse.set_on_mouse_release(x, y, button, key_modifiers, self):
            return

#+end_src
*** def on_mouse_motion : 
#+begin_src python
    def on_mouse_motion(self, x: float, y: float, dx: float, dy: float):
        """ User moves mouse """
        if self.mouse.set_on_mouse_motion(x, y, dx, dy, self):
            return
            
#+end_src
*** def add_element : 
#+begin_src python
    def add_element(self, element):
        self.elements_list.append(element)

#+end_src

*** def remove_element : 
#+begin_src python
    def remove_element(self, element):
        self.elements_list.remove(element)

#+end_src

*** pull_to_top : 
#+begin_src python
    def pull_to_top(self, element: arcade.Sprite):
        """ Pull element sprite to top of rendering order (last to render, looks on-top) """
        # Remove, and append to the end
        self.elements_list.remove(element)
        self.elements_list.append(element)

#+end_src

** if __name__ == "__main__" : 
#+begin_src python
if __name__ == "__main__":
    print("testin Board")
    from game import Game
    game = Game()
    board = Board(game)
    assert(board != None)
    # board.on_mouse_motion(1,2,3,4,6,board)
    board.on_mouse_press(1,2,3,4)
    board.on_mouse_motion(1,2,3,4)
    board.on_mouse_release(1,2,3,4)

#+end_src
* описание
